
- C program must be compiled with "gcc -g" option


- GDB your program start "(gdb) run"


- GDB show code "list":

(gdb) list  // show next 10 lines
2       #include "header.h"
3
4       int var = 9;
5
6       struct person
7       {
8           char name[50];
9           int age;
10      } me = {"Anton", 40};
11


- GDB set breakpoint:

(gdb) break 15 // set breakpoint at line 15
Breakpoint 1 at 0x117c: file main.c, line 15. 
(gdb) break main // set breakpoint at function "main()"
Breakpoint 2 at 0x1169: file main.c, line 13.
(gdb) break 'source.c':Sum // set breakpoint at function "Set() of file source.c"
Breakpoint 3 at 0x11a6: file source.c, line 7.


- GDB "run":

Starting program: /mnt/d/Anton/study/Udemy_Advanced_C/Section15_Compiler_options__Debuging__Analisis/gdb_debugging_breadpoints/main 
 
Breakpoint 2, main () at main.c:13
13      {


- GDB continue after breakpoint:

(gdb) c // continue execution
Continuing.
 
Breakpoint 1, main () at main.c:15
15          sum = Sum();


- GDB step (go inside the function):

(gdb) step // go to the next line
16              printf("i=%d sum=%d\n", i, sum);
(gdb) step
 
Breakpoint 1, Sum () at source.c:15
15              sum += buf[i]; // seg fault
(gdb) s // the same as "step"
16              printf("i=%d sum=%d\n", i, sum);
(gdb) s // the same as "step"
__printf (format=0x800200c "i=%d sum=%d\n") at printf.c:28
28      printf.c: No such file or directory.


- GDB next (do not go inside the function):

(gdb) next
16              printf("i=%d sum=%d\n", i, sum);
(gdb) n // the same as "next"
i=10 sum=-2112245979
13          for (int i = 0; i >= 0; i++)


- GDB get breadpoints info:

(gdb) info break
Num     Type           Disp Enb Address            What
1       breakpoint     keep y   0x000000000800122e in Sum at source.c:15
        breakpoint already hit 1 time
2       breakpoint     keep y   0x00000000080011c6 in Sum at source.c:9


- GDB delete breakpoint:

(gdb) info break
Num     Type           Disp Enb Address            What
1       breakpoint     keep y   0x000000000800122e in Sum at source.c:15
        breakpoint already hit 1 time
2       breakpoint     keep y   0x00000000080011c6 in Sum at source.c:9
(gdb) clear 15 // delete breakpoint at line 15
 
(gdb) info break
Deleted breakpoint 1 Num     Type           Disp Enb Address            What
2       breakpoint     keep y   0x00000000080011c6 in Sum at source.c:9

(gdb) clear Sum // delete breakpoint from func "Sum"

(gdb) info break
Deleted breakpoint 2 No breakpoints or watchpoints


- GDB stack back trace:

(gdb) bt // show stack back trace
#0  Sum () at source.c:9
#1  0x00000000080011a6 in main () at main.c:15


- GDB description of the currently selected stack frame

(gdb) frame // prints a brief description of the currently selected stack frame
#0  Sum () at source.c:9
9       {
(gdb) info frame // prints a detailed description of the currently selected stack frame 
Stack level 0, frame at 0x7ffffffedf00:
 rip = 0x80011c6 in Sum (source.c:9); saved rip = 0x80011a6
 called by frame at 0x7ffffffedf20
 source language c.
 Arglist at 0x7ffffffedef0, args: 
 Locals at 0x7ffffffedef0, Previous frame's sp is 0x7ffffffedf00
 Saved registers:
  rip at 0x7ffffffedef8


- GDB func arguments info:

(gdb) info args
startSum = 5


- (gdb) help
List of classes of commands:

aliases -- Aliases of other commands.
breakpoints -- Making program stop at certain points.
data -- Examining data.
files -- Specifying and examining files.
internals -- Maintenance commands.
obscure -- Obscure features.
running -- Running the program.
stack -- Examining the stack.
status -- Status inquiries.
support -- Support facilities.
tracepoints -- Tracing of program execution without stopping the program.
user-defined -- User-defined commands.

Type "help" followed by a class name for a list of commands in that class.
Type "help all" for the list of all commands.
Type "help" followed by command name for full documentation.
Type "apropos word" to search for commands related to "word".
Type "apropos -v word" for full documentation of commands related to "word".
Command name abbreviations are allowed if unambiguous.
